const bcrypt = require('bcryptjs');
const { query } = require('../config/database');

const fixAdminUser = async () => {
  try {
    console.log('üîß V√©rification et correction de l\'utilisateur admin...');
    
    // V√©rifier si l'admin existe
    const existingAdmin = await query('SELECT * FROM users WHERE email = ?', ['admin@autoparc.com']);
    
    if (existingAdmin.length === 0) {
      console.log('‚ùå Aucun utilisateur admin trouv√©. Cr√©ation en cours...');
      
      // Cr√©er l'utilisateur admin
      const hashedPassword = await bcrypt.hash('admin123', 10);
      
      await query(
        'INSERT INTO users (nom, prenom, email, mot_de_passe, role, actif) VALUES (?, ?, ?, ?, ?, ?)',
        ['Administrateur', 'Syst√®me', 'admin@autoparc.com', hashedPassword, 'admin', true]
      );
      
      console.log('‚úÖ Utilisateur admin cr√©√© avec succ√®s!');
    } else {
      console.log('‚ÑπÔ∏è  Utilisateur admin trouv√©. V√©rification des donn√©es...');
      
      const admin = existingAdmin[0];
      console.log('üìã Donn√©es actuelles:');
      console.log(`   - ID: ${admin.id}`);
      console.log(`   - Nom: ${admin.nom} ${admin.prenom}`);
      console.log(`   - Email: ${admin.email}`);
      console.log(`   - R√¥le: ${admin.role}`);
      console.log(`   - Actif: ${admin.actif}`);
      
      // V√©rifier si le r√¥le est correct
      if (admin.role !== 'admin') {
        console.log('üîÑ Correction du r√¥le...');
        await query('UPDATE users SET role = ? WHERE email = ?', ['admin', 'admin@autoparc.com']);
        console.log('‚úÖ R√¥le corrig√© en admin');
      }
      
      // V√©rifier si l'utilisateur est actif
      if (!admin.actif) {
        console.log('üîÑ Activation de l\'utilisateur...');
        await query('UPDATE users SET actif = ? WHERE email = ?', [true, 'admin@autoparc.com']);
        console.log('‚úÖ Utilisateur activ√©');
      }
      
      // R√©initialiser le mot de passe √† admin123
      console.log('üîÑ R√©initialisation du mot de passe...');
      const hashedPassword = await bcrypt.hash('admin123', 10);
      await query('UPDATE users SET mot_de_passe = ? WHERE email = ?', [hashedPassword, 'admin@autoparc.com']);
      console.log('‚úÖ Mot de passe r√©initialis√© √† "admin123"');
    }
    
    // V√©rification finale
    const finalAdmin = await query('SELECT * FROM users WHERE email = ?', ['admin@autoparc.com']);
    
    if (finalAdmin.length > 0) {
      const admin = finalAdmin[0];
      console.log('\nüéâ Utilisateur admin configur√© avec succ√®s!');
      console.log('üìß Credentials de connexion:');
      console.log('   Email: admin@autoparc.com');
      console.log('   Mot de passe: admin123');
      console.log(`   R√¥le: ${admin.role}`);
      console.log(`   Statut: ${admin.actif ? 'Actif' : 'Inactif'}`);
      
      // Tester le mot de passe
      const isPasswordValid = await bcrypt.compare('admin123', admin.mot_de_passe);
      console.log(`   Mot de passe valide: ${isPasswordValid ? '‚úÖ' : '‚ùå'}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction de l\'utilisateur admin:', error);
    throw error;
  }
};

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  fixAdminUser()
    .then(() => {
      console.log('\n‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erreur lors de l\'ex√©cution du script:', error);
      process.exit(1);
    });
}

module.exports = { fixAdminUser }; 